Practice Problem 3.1
--------------------

Operand        | Value
----------------------
%rax           | 0x100
0x104          |  0xAB
$0x108         | 0x108
(%rax)         |  0xFF
4(%rax)        |  0xAB
9(%rax,%rdx)   |  0x11
260(%rcx,%rdx) |  0x13
0xFC(,%rcx,4)  |  0xFF
(%rax,%rdx,4)  |  0x11

Practice Problem 3.2
--------------------

movl %eax, (%rsp)
movw (%rax), %dx
movb $0xFF, %bl
movb (%rsp,%rdx,4), %dl
movq (%rdx), %rax
movw %dx, (%rax)

Practice Problem 3.3
--------------------

movb $0xF, (%ebx) - (%ebx) is not a 64-bit address.
movl %rax, (%rsp) - Instruction operates on 4 bytes, %rax is 8 bytes.
movw (%rax), 4(%rsp) - Both source and destination are memory locations.
movb %al, %sl - Destination is not a valid register.
movq %rax, $0x123 - Destination is an immediate value. Should be ($0x123).
movl %eax, %rdx - Instruction operates on 4 bytes, %rdx is 8 bytes.
movb %si, 8(%rbp) - Instruction operates on 1 byte, %si is 2 bytes.

Practice Problem 3.4
--------------------

src_t         | dest_t        | Instruction
--------------------------------------------------
long          | long          | movq (%rdi), %rax
              |               | movq %rax, (%rsi)
char          | int           | movsbl (%rdi), %eax
              |               | movl %eax, (%rsi)
char          | unsigned      | movsbl (%rdi), %eax
              |               | movl %eax, (%rsi)
unsigned char | long          | movzbl (%rdi), %eax
              |               | movq %rax, (%rsi)
int           | char          | movl (%rdi), %eax
              |               | movb %al, (%rsi)
unsigned      | unsigned char | movl (%rdi), %eax
              |               | movb %al (%rsi)
char          | short         | movsbw (%rdi), %ax
              |               | movw %ax (%rsi)

Practice Problem 3.5
--------------------

void decode1(long *xp, long *yp, long *zp) {
	// xp = %rdi, yp = %rsi, zp = %rdx
	long x = *xp;
	long y = *yp;
	long z = *zp;
	*yp = x;
	*zp = y;
	*xp = z;
}

Practice Problem 3.6
--------------------

%rbx holds value p and %rdx holds value q

A(B, C, D) = M[A + B + C*D]

Instruction               | Result
----------------------------------
leaq 9(%rdx), %rax        | 9 + q
leaq (%rdx,%rbx), %rax    | q + p
leaq (%rdx,%rbx,3), %rax  | q + 3 * p
leaq 2(%rbx,%rbx,7), %rax | 2 + p * 8
leaq 0xE(,%rdx,3), %rax   | 0xE + q * 3
leaq 6(%rbx,%rdx,7), %rax | 6 + p + q * 7

Practice Problem 3.7
--------------------

x in %rdi, y in %rsi, z in %rdx

short scale3(short x, short y, short z) {
    short t = 10y + z + x * y;
    return t;
}
